# To deploy all network infrastructure components required for a VPC
# with 3 public subnets and 3 prvates subnets
#
# Network topology:
#
# VPC ip range (Class B ): 10.B.0.0/16
#
# Public subnets are (Class C):
#   - 10.B.0.0 - 10.B.0.255 (10.B.0.0/24)
#   - 10.B.2.0 - 10.B.2.255 (10.B.2.0/24)
#   - 10.B.4.0 - 10.B.4.255 (10.B.4.0/24)
#
# Private subnets are (Class C):
#   - 10.B.1.0 - 10.B.1.255 (10.B.1.0/24)
#   - 10.B.3.0 - 10.B.3.255 (10.B.3.0/24)
#   - 10.B.5.0 - 10.B.5.255 (10.B.5.0/24)
#
AWSTemplateFormatVersion: '2010-09-09'
Description: A stack that deploy a VPC with 3 public subnets and 3 private subnets

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'VPC Parameters'
      Parameters:
      - ClassB

Parameters:
  ClassB:
    Description: 'Class B of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255

Resources:
  # 1) VPC creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      CidrBlock: !Sub '10.${ClassB}.0.0/16'
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'vpc']]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'inetgw']]
  GatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'

  # 2) Three public subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub '10.${ClassB}.0.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'pubSubnet1']]
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub '10.${ClassB}.2.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'pubSubnet2']]
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub '10.${ClassB}.4.0/24'
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'pubSubnet3']]

  # 3) Three private subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub '10.${ClassB}.1.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'privSubnet1']]
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub '10.${ClassB}.3.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'privSubnet2']]
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [2, !GetAZs '']
      VpcId: !Ref 'VPC'
      CidrBlock: !Sub '10.${ClassB}.5.0/24'
      MapPublicIpOnLaunch: false
      Tags:
        -
          Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'privSubnet3']]

  # 4) Public Routing tables (one per subnet)
  PublicRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'publicRouting1']]
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable1'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable1

  PublicRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'publicRouting2']]
  PublicRoute2:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable2'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable2

  PublicRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'publicRouting3']]
  PublicRoute3:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable3'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable3

  # 5) Private routing tables (one per subnet)
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'privateRouting1']]
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'privateRouting2']]
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref 'AWS::StackName', 'privateRouting3']]
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable3

  # 6) Network ACL
  NetworkAclPublic:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'publicNetAcl']]
  SubnetNetworkAclAssociation1Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociation2Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      NetworkAclId: !Ref NetworkAclPublic
  SubnetNetworkAclAssociation3Public:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet3
      NetworkAclId: !Ref NetworkAclPublic
  NetworkAclEntryInPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPublicAllowAll:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPublic
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  NetworkAclPrivate:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['-', [!Ref 'AWS::StackName', 'privateNetAcl']]
  SubnetNetworkAclAssociation1Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociation2Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      NetworkAclId: !Ref NetworkAclPrivate
  SubnetNetworkAclAssociation3Private:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet3
      NetworkAclId: !Ref NetworkAclPrivate
  NetworkAclEntryInPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryOutPrivateAllowVPC:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAclPrivate
      RuleNumber: 99
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'

  # 7) NAT Gateways for private subnets
  EIP1:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPC
    Properties:
      Domain: vpc
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP1.AllocationId'
      SubnetId: !Ref 'PublicSubnet1'
  NatRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway1
  EIP2:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPC
    Properties:
      Domain: vpc
  NatGateway2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP2.AllocationId'
      SubnetId: !Ref 'PublicSubnet2'
  NatRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway2
  EIP3:
    Type: 'AWS::EC2::EIP'
    DependsOn: VPC
    Properties:
      Domain: vpc
  NatGateway3:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 'EIP3.AllocationId'
      SubnetId: !Ref 'PublicSubnet3'
  NatRoute3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway3

# Outputs available to child stacks
Outputs:
  VPC:
    Description: 'The VPC Id'
    Value: !Ref 'VPC'
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  ClassB:
    Description: 'The VPC Class B. (10.B.0.0/16)'
    Value: !Ref ClassB
    Export:
      Name: !Sub '${AWS::StackName}-ClassB'
  PublicSubnet1:
    Description: Public subnet 1
    Value: !Ref 'PublicSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet1'
  PublicSubnet2:
    Description: Public subnet 2
    Value: !Ref 'PublicSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet2'
  PublicSubnet3:
    Description: Public subnet 3
    Value: !Ref 'PublicSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnet3'
  PrivateSubnet1:
    Description: Private subnet 1
    Value: !Ref 'PrivateSubnet1'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet1'
  PrivateSubnet2:
    Description: Private subnet 2
    Value: !Ref 'PrivateSubnet2'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet2'
  PrivateSubnet3:
    Description: Private subnet 3
    Value: !Ref 'PrivateSubnet3'
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnet3'
